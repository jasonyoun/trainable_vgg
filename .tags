!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/1c8b98dd/
DATA_TYPE_COMPCARS	main.py	/^DATA_TYPE_COMPCARS = 'compcars'$/;"	v
DATA_TYPE_CUB	main.py	/^DATA_TYPE_CUB = 'cub'$/;"	v
DATA_TYPE_IMAGENET	main.py	/^DATA_TYPE_IMAGENET = 'imagenet'$/;"	v
DEFAULT_CODE_DIR	main.py	/^DEFAULT_CODE_DIR = 'D:\\\\Jason_Folder\\\\Yonsei\\\\Research\\\\fine_grained\\\\code'$/;"	v
DEFAULT_DATASET_DIR	main.py	/^DEFAULT_DATASET_DIR = 'D:\\\\Jason_Folder\\\\Yonsei\\\\Research\\\\dataset'$/;"	v
LOG_DIR	main.py	/^LOG_DIR = os.path.join(DEFAULT_CODE_DIR, LOG_FOLDER)$/;"	v
LOG_FOLDER	main.py	/^LOG_FOLDER = 'log'$/;"	v
MyNetwork	networks\\my_network.py	/^class MyNetwork:$/;"	c
NETWORKS_DIR	main.py	/^NETWORKS_DIR = os.path.join(DEFAULT_CODE_DIR, NETWORKS_FOLDER)$/;"	v
NETWORKS_FOLDER	main.py	/^NETWORKS_FOLDER = 'networks'$/;"	v
NetworkCommon	networks\\network_common.py	/^class NetworkCommon:$/;"	c
ParseCub	parsedata\\parse_cub.py	/^class ParseCub:$/;"	c
ST_VGG	networks\\st_vgg.py	/^class ST_VGG:$/;"	c
Solver	solver.py	/^class Solver():$/;"	c
VGG16	networks\\vgg16.py	/^class VGG16:$/;"	c
VGG19	networks\\vgg19.py	/^class VGG19:$/;"	c
WEIGHTS_DIR	main.py	/^WEIGHTS_DIR = os.path.join(NETWORKS_DIR, WEIGHTS_FOLDER)$/;"	v
WEIGHTS_FOLDER	main.py	/^WEIGHTS_FOLDER = 'weights'$/;"	v
WEIGHT_VGG16_IMAGENET	main.py	/^WEIGHT_VGG16_IMAGENET = 'vgg16.npy'$/;"	v
WEIGHT_VGG19_IMAGENET	main.py	/^WEIGHT_VGG19_IMAGENET = 'vgg19.npy'$/;"	v
W_conv1	networks\\stn\\cluttered_mnist.py	/^W_conv1 = weight_variable([filter_size, filter_size, 1, n_filters_1])$/;"	v
W_conv2	networks\\stn\\cluttered_mnist.py	/^W_conv2 = weight_variable([filter_size, filter_size, n_filters_1, n_filters_2])$/;"	v
W_fc1	networks\\stn\\cluttered_mnist.py	/^W_fc1 = weight_variable([10 * 10 * n_filters_2, n_fc])$/;"	v
W_fc1	networks\\stn\\example.py	/^    W_fc1 = tf.Variable(tf.zeros([1200 * 1600 * 3, n_fc]), name='W_fc1')$/;"	v
W_fc2	networks\\stn\\cluttered_mnist.py	/^W_fc2 = weight_variable([n_fc, 10])$/;"	v
W_fc_loc1	networks\\stn\\cluttered_mnist.py	/^W_fc_loc1 = weight_variable([1600, 20])$/;"	v
W_fc_loc2	networks\\stn\\cluttered_mnist.py	/^W_fc_loc2 = weight_variable([20, 6])$/;"	v
X_test	networks\\stn\\cluttered_mnist.py	/^X_test = mnist_cluttered['X_test']$/;"	v
X_train	networks\\stn\\cluttered_mnist.py	/^X_train = mnist_cluttered['X_train']$/;"	v
X_valid	networks\\stn\\cluttered_mnist.py	/^X_valid = mnist_cluttered['X_valid']$/;"	v
Y_test	networks\\stn\\cluttered_mnist.py	/^Y_test = dense_to_one_hot(y_test, n_classes=10)$/;"	v
Y_train	networks\\stn\\cluttered_mnist.py	/^Y_train = dense_to_one_hot(y_train, n_classes=10)$/;"	v
Y_valid	networks\\stn\\cluttered_mnist.py	/^Y_valid = dense_to_one_hot(y_valid, n_classes=10)$/;"	v
_BATCH_SIZE	solver.py	/^	_BATCH_SIZE = 32$/;"	v	class:Solver
_BOUNDING_BOXES_TXT	parsedata\\parse_cub.py	/^	_BOUNDING_BOXES_TXT = 'bounding_boxes.txt'$/;"	v	class:ParseCub
_CUB	solver.py	/^	_CUB = 'cub'$/;"	v	class:Solver
_CUB_FOLDER	parsedata\\parse_cub.py	/^	_CUB_FOLDER = 'CUB_200_2011'$/;"	v	class:ParseCub
_IMAGES_FOLDER	parsedata\\parse_cub.py	/^	_IMAGES_FOLDER = 'images'$/;"	v	class:ParseCub
_IMAGES_TXT	parsedata\\parse_cub.py	/^	_IMAGES_TXT = 'images.txt'$/;"	v	class:ParseCub
_IMAGE_CLASS_LABELS_TXT	parsedata\\parse_cub.py	/^	_IMAGE_CLASS_LABELS_TXT = 'image_class_labels.txt'$/;"	v	class:ParseCub
_MY_NETWORK	solver.py	/^	_MY_NETWORK = 'my_network'$/;"	v	class:Solver
_NUM_CLASSES	parsedata\\parse_cub.py	/^	_NUM_CLASSES = 200$/;"	v	class:ParseCub
_NUM_TEST_IMGS	parsedata\\parse_cub.py	/^	_NUM_TEST_IMGS = _NUM_TOTAL_IMGS - _NUM_TRAIN_IMGS - _NUM_VAL_IMGS$/;"	v	class:ParseCub
_NUM_TOTAL_IMGS	parsedata\\parse_cub.py	/^	_NUM_TOTAL_IMGS = 11788$/;"	v	class:ParseCub
_NUM_TRAIN_IMGS	parsedata\\parse_cub.py	/^	_NUM_TRAIN_IMGS = 8251$/;"	v	class:ParseCub
_NUM_VAL_IMGS	parsedata\\parse_cub.py	/^	_NUM_VAL_IMGS = 1768$/;"	v	class:ParseCub
_OUT_SIZE	networks\\my_network.py	/^	_OUT_SIZE = (7, 7)$/;"	v	class:MyNetwork
_PARTS_LOCS_TXT	parsedata\\parse_cub.py	/^	_PARTS_LOCS_TXT = 'parts\\\\part_locs.txt'$/;"	v	class:ParseCub
_RGB_MEAN	networks\\my_network.py	/^	_RGB_MEAN = [123.68, 116.779, 103.939]$/;"	v	class:MyNetwork
_ST_VGG	solver.py	/^	_ST_VGG = 'st_vgg'$/;"	v	class:Solver
_TEST_LIST	parsedata\\parse_cub.py	/^	_TEST_LIST = 'test_list.txt'$/;"	v	class:ParseCub
_TEST_LOG_FOLDER	solver.py	/^	_TEST_LOG_FOLDER = 'test'$/;"	v	class:Solver
_TRAIN_LIST	parsedata\\parse_cub.py	/^	_TRAIN_LIST = 'train_list.txt'$/;"	v	class:ParseCub
_TRAIN_LOG_FOLDER	solver.py	/^	_TRAIN_LOG_FOLDER = 'train'$/;"	v	class:Solver
_VAL_LIST	parsedata\\parse_cub.py	/^	_VAL_LIST = 'val_list.txt'$/;"	v	class:ParseCub
_VAL_LOG_FOLDER	solver.py	/^	_VAL_LOG_FOLDER = 'val'$/;"	v	class:Solver
_VGG16	solver.py	/^	_VGG16 = 'vgg16'$/;"	v	class:Solver
_VGG19	solver.py	/^	_VGG19 = 'vgg19'$/;"	v	class:Solver
_VGG_RGB_MEAN	networks\\vgg16.py	/^	_VGG_RGB_MEAN = [123.68, 116.779, 103.939]$/;"	v	class:VGG16
_VGG_RGB_MEAN	networks\\vgg19.py	/^	_VGG_RGB_MEAN = [123.68, 116.779, 103.939]$/;"	v	class:VGG19
__init__	networks\\my_network.py	/^	def __init__(self, num_classes=None, npy_path=None,$/;"	m	class:MyNetwork
__init__	networks\\network_common.py	/^	def __init__(self, init_layers, npy_path, trainable, initializer=None, stddev=0.001):$/;"	m	class:NetworkCommon
__init__	networks\\st_vgg.py	/^	def __init__(self, num_classes=None, npy_path=None,$/;"	m	class:ST_VGG
__init__	networks\\vgg16.py	/^	def __init__(self, num_classes=None, npy_path=None,$/;"	m	class:VGG16
__init__	networks\\vgg19.py	/^	def __init__(self, num_classes=None, npy_path=None,$/;"	m	class:VGG19
__init__	parsedata\\parse_cub.py	/^	def __init__(self, dataset_dir, resize, crop_shape, batch_size, isotropical=False, initial_load/;"	m	class:ParseCub
__init__	solver.py	/^	def __init__($/;"	m	class:Solver
_file_list_2_bb	parsedata\\parse_cub.py	/^	def _file_list_2_bb(self):$/;"	m	class:ParseCub
_file_list_2_part_locs	parsedata\\parse_cub.py	/^	def _file_list_2_part_locs(self):$/;"	m	class:ParseCub
_fill_bb_list	parsedata\\parse_cub.py	/^			def _fill_bb_list(id_list, bb_list):$/;"	f	member:ParseCub._file_list_2_bb	file:
_fill_pl_list	parsedata\\parse_cub.py	/^			def _fill_pl_list(id_list, pl_list):$/;"	f	member:ParseCub._file_list_2_part_locs	file:
_get_conv_var	networks\\network_common.py	/^	def _get_conv_var(self, filter_size, in_channels, out_channels, name):$/;"	m	class:NetworkCommon
_get_fc_var	networks\\network_common.py	/^	def _get_fc_var(self, in_size, out_size, init_weight, init_bias, name):$/;"	m	class:NetworkCommon
_get_var	networks\\network_common.py	/^	def _get_var(self, initial_value, name, idx, var_name):$/;"	m	class:NetworkCommon
_get_var_count	solver.py	/^	def _get_var_count(self):$/;"	m	class:Solver
_interpolate	networks\\stn\\spatial_transformer.py	/^	def _interpolate(im, x, y, out_size):$/;"	f	function:transformer	file:
_load_list	parsedata\\parse_cub.py	/^	def _load_list(self):$/;"	m	class:ParseCub
_make_list	parsedata\\parse_cub.py	/^	def _make_list(self):$/;"	m	class:ParseCub
_meshgrid	networks\\stn\\spatial_transformer.py	/^	def _meshgrid(height, width):$/;"	f	function:transformer	file:
_modify_crop_bb	image_utils.py	/^def _modify_crop_bb(crop_width, crop_height, ws, hs, bounding_box):$/;"	f
_modify_crop_pl	image_utils.py	/^def _modify_crop_pl(crop_width, crop_height, ws, hs, part_locs):$/;"	f
_repeat	networks\\stn\\spatial_transformer.py	/^	def _repeat(x, n_repeats):$/;"	f	function:transformer	file:
_transform	networks\\stn\\spatial_transformer.py	/^	def _transform(theta, input_dim, out_size):$/;"	f	function:transformer	file:
_update_head_2_pl_list	parsedata\\parse_cub.py	/^		def _update_head_2_pl_list(pl_list):$/;"	f	member:ParseCub._update_part_locs	file:
_update_part_locs	parsedata\\parse_cub.py	/^	def _update_part_locs(self):$/;"	m	class:ParseCub
abs_pl_2_bb	networks\\stn\\spatial_transformer.py	/^def abs_pl_2_bb(bounding_boxes, abs_pl):$/;"	f
accuracy	networks\\stn\\cluttered_mnist.py	/^accuracy = tf.reduce_mean(tf.cast(correct_prediction, 'float'))$/;"	v
augment_image_batch	image_utils.py	/^def augment_image_batch($/;"	f
avg_pool	networks\\network_common.py	/^	def avg_pool(self, inputs, name):$/;"	m	class:NetworkCommon
b_conv1	networks\\stn\\cluttered_mnist.py	/^b_conv1 = bias_variable([n_filters_1])$/;"	v
b_conv2	networks\\stn\\cluttered_mnist.py	/^b_conv2 = bias_variable([n_filters_2])$/;"	v
b_fc1	networks\\stn\\cluttered_mnist.py	/^b_fc1 = bias_variable([n_fc])$/;"	v
b_fc1	networks\\stn\\example.py	/^    b_fc1 = tf.Variable(initial_value=initial, name='b_fc1')$/;"	v
b_fc2	networks\\stn\\cluttered_mnist.py	/^b_fc2 = bias_variable([10])$/;"	v
b_fc_loc1	networks\\stn\\cluttered_mnist.py	/^b_fc_loc1 = bias_variable([20])$/;"	v
b_fc_loc2	networks\\stn\\cluttered_mnist.py	/^b_fc_loc2 = tf.Variable(initial_value=initial, name='b_fc_loc2')$/;"	v
batch	networks\\stn\\example.py	/^batch = np.append(batch, im, axis=0)$/;"	v
batch	networks\\stn\\example.py	/^batch = np.append(im, im, axis=0)$/;"	v
batch_transformer	networks\\stn\\spatial_transformer.py	/^def batch_transformer(U, thetas, out_size, name='BatchSpatialTransformer'):$/;"	f
batch_xs	networks\\stn\\cluttered_mnist.py	/^		batch_xs = X_train[indices[iter_i]:indices[iter_i+1]]$/;"	v
batch_ys	networks\\stn\\cluttered_mnist.py	/^		batch_ys = Y_train[indices[iter_i]:indices[iter_i+1]]$/;"	v
bb_2_transcale	networks\\stn\\spatial_transformer.py	/^def bb_2_transcale(bounding_boxes):$/;"	f
bb_pixels_2_relative	image_utils.py	/^def bb_pixels_2_relative(bounding_boxes, width, height):$/;"	f
bias_variable	networks\\stn\\tf_utils.py	/^def bias_variable(shape):$/;"	f
build	networks\\my_network.py	/^	def build(self, rgb, train_mode=None, **kwargs):$/;"	m	class:MyNetwork
build	networks\\st_vgg.py	/^	def build(self, rgb, train_mode=None, **kwargs):$/;"	m	class:ST_VGG
build	networks\\vgg16.py	/^	def build(self, rgb, train_mode=None):$/;"	m	class:VGG16
build	networks\\vgg19.py	/^	def build(self, rgb, train_mode=None):$/;"	m	class:VGG19
build_partial	networks\\vgg16.py	/^	def build_partial(self, rgb, build_until, return_intermediates=None, train_mode=None):$/;"	m	class:VGG16
build_partial	networks\\vgg19.py	/^	def build_partial(self, rgb, build_until, train_mode=None):$/;"	m	class:VGG19
centered_bgr_2_rgb	image_utils.py	/^def centered_bgr_2_rgb(centered_bgr, mean_rgb):$/;"	f
central_crop	image_utils.py	/^def central_crop(input_img, crop_width, crop_height, bounding_box=None, part_locs=None):$/;"	f
check_part_locs_boundary	image_utils.py	/^def check_part_locs_boundary(part_locs, crop_width, crop_height, part_key):$/;"	f
clip_transcale	networks\\stn\\spatial_transformer.py	/^def clip_transcale(ts_matrix):$/;"	f
conv2d	networks\\stn\\tf_utils.py	/^def conv2d(x, n_filters,$/;"	f
conv_layer	networks\\network_common.py	/^	def conv_layer(self, inputs, filter_size, in_channels, out_channels, name, do_batch_norm=False)/;"	m	class:NetworkCommon
correct_prediction	networks\\stn\\cluttered_mnist.py	/^correct_prediction = tf.equal(tf.argmax(y_logits, 1), tf.argmax(y, 1))$/;"	v
cross_entropy	networks\\stn\\cluttered_mnist.py	/^cross_entropy = tf.reduce_mean($/;"	v
dense_to_one_hot	networks\\stn\\tf_utils.py	/^def dense_to_one_hot(labels, n_classes=2):$/;"	f
dir_exists	utils.py	/^def dir_exists(dir_name):$/;"	f
draw_bounding_boxes	image_utils.py	/^def draw_bounding_boxes(images, bounding_boxes_list):$/;"	f
dropout_layer	networks\\network_common.py	/^	def dropout_layer(self, inputs, dropout_rate, train_mode, name):$/;"	m	class:NetworkCommon
entry_stop_gradients	networks\\network_common.py	/^	def entry_stop_gradients(self, target, mask):$/;"	m	class:NetworkCommon
extract_part_from_part_locs	image_utils.py	/^def extract_part_from_part_locs(part_locs, part_key):$/;"	f
fc_layer	networks\\network_common.py	/^	def fc_layer(self, inputs, in_size, out_size, is_last, name, do_batch_norm=False, activation_fn/;"	m	class:NetworkCommon
file_exists	utils.py	/^def file_exists(file_name):$/;"	f
filter_size	networks\\stn\\cluttered_mnist.py	/^filter_size = 3$/;"	v
get_image_mean	image_utils.py	/^def get_image_mean(list_file, resize=None, isotropical=False):$/;"	f
get_next_test_batch	parsedata\\parse_cub.py	/^	def get_next_test_batch(self):$/;"	m	class:ParseCub
get_next_train_batch	parsedata\\parse_cub.py	/^	def get_next_train_batch(self, augment=True):$/;"	m	class:ParseCub
get_next_val_batch	parsedata\\parse_cub.py	/^	def get_next_val_batch(self):$/;"	m	class:ParseCub
get_num_classes	parsedata\\parse_cub.py	/^	def get_num_classes(self):$/;"	m	class:ParseCub
grads	networks\\stn\\cluttered_mnist.py	/^grads = opt.compute_gradients(cross_entropy, [b_fc_loc2])$/;"	v
h_conv1	networks\\stn\\cluttered_mnist.py	/^h_conv1 = tf.nn.relu($/;"	v
h_conv2	networks\\stn\\cluttered_mnist.py	/^h_conv2 = tf.nn.relu($/;"	v
h_conv2_flat	networks\\stn\\cluttered_mnist.py	/^h_conv2_flat = tf.reshape(h_conv2, [-1, 10 * 10 * n_filters_2])$/;"	v
h_fc1	networks\\stn\\cluttered_mnist.py	/^h_fc1 = tf.nn.relu(tf.matmul(h_conv2_flat, W_fc1) + b_fc1)$/;"	v
h_fc1	networks\\stn\\example.py	/^    h_fc1 = tf.matmul(tf.zeros([num_batch, 1200 * 1600 * 3]), W_fc1) + b_fc1$/;"	v
h_fc1_drop	networks\\stn\\cluttered_mnist.py	/^h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)$/;"	v
h_fc_loc1	networks\\stn\\cluttered_mnist.py	/^h_fc_loc1 = tf.nn.tanh(tf.matmul(x, W_fc_loc1) + b_fc_loc1)$/;"	v
h_fc_loc1_drop	networks\\stn\\cluttered_mnist.py	/^h_fc_loc1_drop = tf.nn.dropout(h_fc_loc1, keep_prob)$/;"	v
h_fc_loc2	networks\\stn\\cluttered_mnist.py	/^h_fc_loc2 = tf.nn.tanh(tf.matmul(h_fc_loc1_drop, W_fc_loc2) + b_fc_loc2)$/;"	v
h_trans	networks\\stn\\cluttered_mnist.py	/^h_trans = transformer(x_tensor, h_fc_loc2, out_size)$/;"	v
h_trans	networks\\stn\\example.py	/^    h_trans = transformer(x, h_fc1, out_size)$/;"	v
iaa	image_utils.py	/^from imgaug import augmenters as iaa$/;"	x
im	networks\\stn\\example.py	/^im = im \/ 255.$/;"	v
im	networks\\stn\\example.py	/^im = im.astype('float32')$/;"	v
im	networks\\stn\\example.py	/^im = im.reshape(1, 1200, 1600, 3)$/;"	v
im	networks\\stn\\example.py	/^im = ndimage.imread('cat.jpg')$/;"	v
indices	networks\\stn\\cluttered_mnist.py	/^indices = indices.astype('int')$/;"	v
indices	networks\\stn\\cluttered_mnist.py	/^indices = np.linspace(0, 10000 - 1, iter_per_epoch)$/;"	v
initial	networks\\stn\\cluttered_mnist.py	/^initial = initial.astype('float32')$/;"	v
initial	networks\\stn\\cluttered_mnist.py	/^initial = initial.flatten()$/;"	v
initial	networks\\stn\\cluttered_mnist.py	/^initial = np.array([[1., 0, 0], [0, 1., 0]])$/;"	v
initial	networks\\stn\\example.py	/^    initial = initial.astype('float32')$/;"	v
initial	networks\\stn\\example.py	/^    initial = initial.flatten()$/;"	v
initial	networks\\stn\\example.py	/^    initial = np.array([[0.5, 0, 0], [0, 0.5, 0]])$/;"	v
isotropical_resize	image_utils.py	/^def isotropical_resize(input_img, base, upscale, bounding_box=None, part_locs=None):$/;"	f
iter_per_epoch	networks\\stn\\cluttered_mnist.py	/^iter_per_epoch = 100$/;"	v
keep_prob	networks\\stn\\cluttered_mnist.py	/^keep_prob = tf.placeholder(tf.float32)$/;"	v
linear	networks\\stn\\tf_utils.py	/^def linear(x, n_units, scope=None, stddev=0.02,$/;"	f
log	image_utils.py	/^import logging as log$/;"	I
log	main.py	/^import logging as log$/;"	I
log	networks\\my_network.py	/^import logging as log$/;"	I
log	networks\\network_common.py	/^import logging as log$/;"	I
log	networks\\st_vgg.py	/^import logging as log$/;"	I
log	networks\\vgg16.py	/^import logging as log$/;"	I
log	networks\\vgg19.py	/^import logging as log$/;"	I
log	parsedata\\parse_cub.py	/^import logging as log$/;"	I
log	solver.py	/^import logging as log$/;"	I
log	utils.py	/^import logging as log$/;"	I
loss	networks\\stn\\cluttered_mnist.py	/^			loss = sess.run(cross_entropy,$/;"	v
max_pool	networks\\network_common.py	/^	def max_pool(self, inputs, name, stride=2):$/;"	m	class:NetworkCommon
mnist_cluttered	networks\\stn\\cluttered_mnist.py	/^mnist_cluttered = np.load('.\/data\/mnist_sequence1_sample_5distortions5x5.npz')$/;"	v
my_network_func	main.py	/^def my_network_func(mode='train'):$/;"	f
n_epochs	networks\\stn\\cluttered_mnist.py	/^n_epochs = 500$/;"	v
n_fc	networks\\stn\\cluttered_mnist.py	/^n_fc = 1024$/;"	v
n_fc	networks\\stn\\example.py	/^    n_fc = 6$/;"	v
n_filters_1	networks\\stn\\cluttered_mnist.py	/^n_filters_1 = 16$/;"	v
n_filters_2	networks\\stn\\cluttered_mnist.py	/^n_filters_2 = 16$/;"	v
np	image_utils.py	/^import numpy as np$/;"	I
np	main.py	/^import numpy as np$/;"	I
np	networks\\my_network.py	/^import numpy as np$/;"	I
np	networks\\network_common.py	/^import numpy as np$/;"	I
np	networks\\st_vgg.py	/^import numpy as np$/;"	I
np	networks\\stn\\cluttered_mnist.py	/^import numpy as np$/;"	I
np	networks\\stn\\example.py	/^import numpy as np$/;"	I
np	networks\\stn\\tf_utils.py	/^import numpy as np$/;"	I
np	networks\\vgg16.py	/^import numpy as np$/;"	I
np	networks\\vgg19.py	/^import numpy as np$/;"	I
np	parsedata\\parse_cub.py	/^import numpy as np$/;"	I
np	solver.py	/^import numpy as np$/;"	I
np	utils.py	/^import numpy as np$/;"	I
num_batch	networks\\stn\\example.py	/^num_batch = 3$/;"	v
opt	networks\\stn\\cluttered_mnist.py	/^opt = tf.train.AdamOptimizer()$/;"	v
optimizer	networks\\stn\\cluttered_mnist.py	/^optimizer = opt.minimize(cross_entropy)$/;"	v
out_size	networks\\stn\\cluttered_mnist.py	/^out_size = (40, 40)$/;"	v
out_size	networks\\stn\\example.py	/^out_size = (600, 800)$/;"	v
patches	parsedata\\parse_cub.py	/^import matplotlib.patches as patches$/;"	I
pl_pixels_2_relative	image_utils.py	/^def pl_pixels_2_relative(part_locs, width, height):$/;"	f
plt	main.py	/^import matplotlib.pyplot as plt$/;"	I
plt	networks\\stn\\example.py	/^import matplotlib.pyplot as plt$/;"	I
plt	parsedata\\parse_cub.py	/^import matplotlib.pyplot as plt$/;"	I
plt	solver.py	/^import matplotlib.pyplot as plt$/;"	I
predictor	solver.py	/^	def predictor(self, image):$/;"	m	class:Solver
print_prob	utils.py	/^def print_prob(prob, file_path):$/;"	f
random_crop	image_utils.py	/^def random_crop(input_img, crop_width, crop_height, bounding_box=None, part_locs=None):$/;"	f
rel_trans_2_abs_pl	networks\\stn\\spatial_transformer.py	/^def rel_trans_2_abs_pl(bounding_boxes, t_matrix):$/;"	f
resize_image	image_utils.py	/^def resize_image(input_img, shape, bounding_box=None, part_locs=None):$/;"	f
rgb_2_centered_bgr	image_utils.py	/^def rgb_2_centered_bgr(rgb, mean_rgb):$/;"	f
save_npy	solver.py	/^	def save_npy(self, save_path, scope=None):$/;"	m	class:Solver
sess	networks\\stn\\cluttered_mnist.py	/^sess = tf.Session()$/;"	v
sess	networks\\stn\\example.py	/^sess = tf.Session()$/;"	v
set_logging	main.py	/^def set_logging():$/;"	f
st_vgg_func	main.py	/^def st_vgg_func(mode='train'):$/;"	f
tester	solver.py	/^	def tester(self):$/;"	m	class:Solver
tf	image_utils.py	/^import tensorflow as tf$/;"	I
tf	main.py	/^import tensorflow as tf$/;"	I
tf	networks\\my_network.py	/^import tensorflow as tf$/;"	I
tf	networks\\network_common.py	/^import tensorflow as tf$/;"	I
tf	networks\\st_vgg.py	/^import tensorflow as tf$/;"	I
tf	networks\\stn\\cluttered_mnist.py	/^import tensorflow as tf$/;"	I
tf	networks\\stn\\example.py	/^import tensorflow as tf$/;"	I
tf	networks\\stn\\spatial_transformer.py	/^import tensorflow as tf$/;"	I
tf	networks\\stn\\tf_utils.py	/^import tensorflow as tf$/;"	I
tf	networks\\vgg16.py	/^import tensorflow as tf$/;"	I
tf	networks\\vgg19.py	/^import tensorflow as tf$/;"	I
tf	parsedata\\parse_cub.py	/^import tensorflow as tf$/;"	I
tf	solver.py	/^import tensorflow as tf$/;"	I
tf	utils.py	/^import tensorflow as tf$/;"	I
train_size	networks\\stn\\cluttered_mnist.py	/^train_size = 10000$/;"	v
trainer	solver.py	/^	def trainer($/;"	m	class:Solver
trans_2_affine	networks\\stn\\spatial_transformer.py	/^def trans_2_affine(elems):$/;"	f
transcale_2_affine	networks\\stn\\spatial_transformer.py	/^def transcale_2_affine(ts_matrix):$/;"	f
transcale_2_bb	networks\\stn\\spatial_transformer.py	/^def transcale_2_bb(ts_matrix):$/;"	f
transformer	networks\\stn\\spatial_transformer.py	/^def transformer(U, theta, out_size, name='SpatialTransformer', **kwargs):$/;"	f
vgg_cub_ft_func	main.py	/^def vgg_cub_ft_func(mode='train'):$/;"	f
weight_variable	networks\\stn\\tf_utils.py	/^def weight_variable(shape):$/;"	f
x	networks\\stn\\cluttered_mnist.py	/^x = tf.placeholder(tf.float32, [None, 1600])$/;"	v
x	networks\\stn\\example.py	/^x = tf.cast(batch, 'float32')$/;"	v
x	networks\\stn\\example.py	/^x = tf.placeholder(tf.float32, [None, 1200, 1600, 3])$/;"	v
x_tensor	networks\\stn\\cluttered_mnist.py	/^x_tensor = tf.reshape(x, [-1, 40, 40, 1])$/;"	v
y	networks\\stn\\cluttered_mnist.py	/^y = tf.placeholder(tf.float32, [None, 10])$/;"	v
y	networks\\stn\\example.py	/^y = sess.run(h_trans, feed_dict={x: batch})$/;"	v
y_logits	networks\\stn\\cluttered_mnist.py	/^y_logits = tf.matmul(h_fc1_drop, W_fc2) + b_fc2$/;"	v
y_test	networks\\stn\\cluttered_mnist.py	/^y_test = mnist_cluttered['y_test']$/;"	v
y_train	networks\\stn\\cluttered_mnist.py	/^y_train = mnist_cluttered['y_train']$/;"	v
y_valid	networks\\stn\\cluttered_mnist.py	/^y_valid = mnist_cluttered['y_valid']$/;"	v
